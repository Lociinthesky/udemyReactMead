How-To-Webpack.

If global things are installed,

yarn global remove babel-cli live-server
//Or
npm uninstall -g babel-cli live-server

Now

yarn add live-server babel-cli@6.24.1

//babel-cli and live-server will now be dependencies in package.json

On the root object, add a new property called “scripts” in package.json.

“scripts” : {
	“serve”:”live-server public/”
},

Yarn run serve 
//in the terminal this now works. 

“scripts” : {
  “serve”:”live-server public/”,
  “build”: “babel src/app.js —-out-file=public/scripts/app.js —-presets=env,react —-watch”
},

yarn run serve 
//in terminal 1, above.  
//in terminal window 2, below:
yarn run build

//3 big advantages to local: we can use different versions in different apps
//. we can make scripts
// all of the things needed for the project are now included in our dependencies.

//*********************—lecture 50, install and configure web pack	

yarn add webpack@3.1.0


“scripts” : {
  “serve”:”live-server public/”,
  “build”: “webpack —-watch”,
  “build-babel”: “babel src/app.js —-out-file=public/scripts/app.js —-presets=env,react —-watch”,
  
},


//notice I changed the name of build.  This won’t work yet.  We must first make a web pack config file.

//create webpack.config.js file in the root folder.

//we need to tell it 2 critical pieces of info. the entry (input file src/app.js), and the output, (bundle)

//In web pack config

module.exports = {
  entry: ‘./src/app.js’,
  Output: {
   Path: ‘’,     //absolute path, THERE IS A 2-STEP (3?) TRICK TO GETTING THIS
   Filename: ‘bundle.js’
  }
}

console.log(__dirname);
//in terminal, run the file to log __dirname to the terminal like so:
node webpack.config.js
//output will be the absolute file path TO WEBPACK.CONFIG.JS which is not what we want.

//We need to join that with the relative path to the public folder using path.join(), like so: (first, we have to add the line to require path at the top of webpack.config.js):

const path = require(‘path’);

module.exports = {
  entry: ‘./src/app.js’,
  output: {
   path: path.join(__dirname, ‘public’),
   filename: ‘bundle.js’
  }
}


//www.webpack.js.org  look at the docs and you can see other ways to use Entry etc

//we are done! This is the minimal web pack setup.

//In public, make sure we have an index.html with 
<body>
  <div id=“app”></div>
  <script src=“/bundle.js”></script>
</body>

//——*******************. ES6 imports and exports. **************************
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//inside src/, alongside app.js, create utils.js, which looks like this
console.log('utils.js is running')

export const square = x => x * x;
export const add = (a, b) => a + b;

//2 kinds of exports  "default" exports and "named" exports.
//2 ways to do “named” exports ( one in utils.js and one in person.js )
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



//——————————————————————————————————————————————————————————————————————————————
//create person.js alongside app.js and utils.js, and create and exp two “named” exports

//in person.js
const isAdult = age => age >= 18;
const canDrink = age => age >= 21;

export { isAdult, canDrink }

//——————————————————————————————————————————————————————————————————————————————

//In app.js, we import these the same way

import { square, add } from ‘./utils.js’
import { isAdult, canDrink } from ‘./person.js’





//********************ES6 DEFAULT EXPORTS**********************
//in utilsWithDefault.js


console.log('utilsWithDefault.js is running')

const square = x => x * x;
const add = (a, b) => a + b;
const subtract = (c, d) => c - d;

export { square, add, subtract as default} 
//NOTE!!! CAN ONLY SET ONE DEFAULT AND MUST IMPORT DIFFERENTLY

//in app.js:
import subtract, { square, add } from ‘./utilsWithDefault.js’
// or just
import subtract from ‘./utilsWithDefault.js’

//alternatively

import anyThingIWantToCallSubtractWillWorkIfIUseItBelow from ‘./utilsWithDefault.js’


//If we wanted to use the export-first naming convention….
//in utilsWithDefault.js


console.log('utilsWithDefault.js is running')

export const square = x => x * x;
export const add = (a, b) => a + b;

const subtract = (c, d) => c - d;

export default subtract

//OR we can export default with an anonymous fn!

//***********************************
//in utilsWithDefault.js
console.log('utilsWithDefault.js is running')

export const square = x => x * x;
export const add = (a, b) => a + b;
export default (c, d) => c - d;
//************************************
//********************IMPORT NPM MODULES
//************************************
/*
1)install
2)import
3)use
In terminal:
Yarn add validator@8.0.0
In app.js, 
import validator from ‘validator’

This is the same as using something we did write, but we don’t specify a path bc that’s how you import things we did not write.

Now do yarn run serve
Import validator in app.js
Do yarn run build
Try console.log(validator.isEmail(‘test’))
Should be false.  If you go on the validator documentation, there are many other methods.

bundle.js is now a large file.  If we comment out the import line it will be small again.

Now react and reactDOM
Yarn add react@16.0.0 react-dom@16.0.0
Import them.
Just google an example of how to import if needed.

Next lecture:

Yarn add babel-core@6.25.0 babel-loader@7.1.1
The latter lets us teach babel how to run certain kinds of things when it sees them.
Let’s set that up on the module property, put a comma between the last 2 curly braces

You can look up module.rules to see what we are about to do.
Module: {
  Rules: [{
    Loader: ‘babel-loader’,
    Test: /.js$/,
    Exclude: /node_modules/
  }]
}

Now in root create .babelrc

{
  “Presets”: [
    “Env”,
    “React”
  ]
}

Now in app.js in our src folder we can type

Import React from ‘react’
Import ReactDOM from ‘react-dom’

Const template = <p>THIS IS JSX FROM WEBPACK</p>;
ReactDOM.render(template, document.getElementById(‘app));

This would not have worked before
Recap: we taught babel to run .js files unless they are found in the /node_modules/ folder

Next lecture: one component per file.

Paste the indecision-app into app.js in src with just the react and reactDOM imports at the top.  It should work

Create a components folder in src.  Make a new file such as AddOption.js for every component.

Put 
import React from ‘react’ 
at the top of each.

For class components, just put 

export default class AddOption extends React.Component {


For functional components like Option, keep them as they are (in their own file with react imported)

But at the very bottom of the file use 

export default Option;

For IndecisionApp.js in components, the top of the file should look like

import React from 'react';
import AddOption from './AddOption';
import Action from './Action';
import Header from './Header';
import Options from './Options';


Since the latter are used in its render function.  Similarly, the top of Options should be

import React from 'react';
import Option from './Option';

There may be more examples of this.

*******************
Challenge:  from app.js which now has the class IndecisionApp component
*******************
//move the component code into its own file in components
//setup import(s) and export
//(move these imports into that file.  Now app.js will be made extremely short,
//having only 3 import statements at the top, and then

ReactDOM.render(<IndecisionApp />, document.getElementById('app'));

//at the bottom.




*******************
Next lecture: source maps with web pack:
*******************


//further setting up web pack devtool will make finding bugs easier.

//we do this in webpack.config.js
//put another comma between the last two curly braces.
//add:

  devtool: 'cheap-module-eval-source-map'

//now, bugs in code will lead us directly to the component file (link on top right) in the terminal!
//note: every time you mess with web pack you have to restart the web pack build in the //terminal


